
* Core
#+BEGIN_SRC emacs-lisp
(package-initialize)

(defvar config-which-key-delay 1.4)

(defvar config-keep-backups t)

;; Font settings
(defvar config-font-family "Source Code Pro")
(defvar config-font-height 160
  "font-height is 1/10pt so 160 == 160/10 == 16pt")

(defvar config-indent-web-mode-spaces 2)

(setq use-package-always-ensure t)
(setq gc-cons-threshold most-positive-fixnum)

;; Set regex syntax to string for re-builder
(setq reb-re-syntax 'string)

;; Hide column numbers
(setq column-number-mode t)

;; Draw underline lower
(setq x-underline-at-descent-line t)

;; Prevent the startup window
(setq inhibit-startup-message t)

;; Hide ui elements
(tool-bar-mode -1)
(menu-bar-mode -1)
(toggle-scroll-bar -1)

;; Keep backups
(setq make-backup-files config-keep-backups)

;; Save ALL backup files to this location
(setq backup-directory-alist `(("." . "~/.emacs.d/backups")))

;; Disable re-center of the cursor to the middle of page when scroll hits top or bottom of the page
(setq scroll-conservatively 101)

;; Automatically scroll the compilation buffer
(setq compilation-scroll-output t)

;; Give focus to new help windows
(setq help-window-select t)
;; Put apropos in current buffer so it can be read and exited with minimum effort
(add-to-list 'display-buffer-alist
            '("*Apropos*" display-buffer-same-window)
            '("*Info*" display-buffer-same-window))

;; Add /usr/local/bin to the path
(setq exec-path (append exec-path '("/usr/local/bin")))

;; Turn on line numbers
(global-display-line-numbers-mode)
(menu-bar-display-line-numbers-mode 'relative)

;; Package management
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; Always hightlight current line
(global-hl-line-mode t)

;; Y or n is enough for me
(fset 'yes-or-no-p 'y-or-n-p)

;; Font
(set-face-attribute 'default nil
                    :family config-font-family
                    :height config-font-height)

;; Parenthesis
(show-paren-mode 1)

;; Enable narrow to region functionality
(put 'narrow-to-region 'disabled nil)

;; Frequently accessed files (C-x r j <letter>)
;; jump-to-register
(set-register ?i '(file . "~/.emacs.d/settings.org"))
(set-register ?o '(file . "~/org/agenda/organizer.org"))
(set-register ?w '(file . "~/org/wiki/index.org"))

;; Colorize compilation-mode
(defun my-colorize-compilation-buffer ()
    (when (eq major-mode 'compilation-mode)
        (ansi-color-apply-on-region compilation-filter-start (point-max))))

(add-hook 'compilation-filter-hook 'my-colorize-compilation-buffer)
#+END_SRC

* Core keybindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f5>") #'revert-buffer)
(global-set-key (kbd "C-c a") #'org-agenda)
(global-set-key (kbd "C-c c") #'org-capture)
(global-set-key (kbd "C-c C-.") #'helpful-at-point)
(global-set-key (kbd "C-c r") #'ido-recentf-open)
(global-set-key (kbd "C-h b") #'describe-bindings)
(global-set-key (kbd "C-h f") #'helpful-callable)
(global-set-key (kbd "C-h k") #'helpful-key)
(global-set-key (kbd "C-h v") #'helpful-variable)
(global-set-key (kbd "C-x C-b") #'ibuffer)
(global-set-key (kbd "C-x C-e") #'pp-eval-last-sexp)
(global-set-key (kbd "C-x C-f") 'ido-find-file)
(global-set-key (kbd "C-x g") #'magit-status)
(global-set-key (kbd "C-x M-g") #'magit-dispatch-popup)
(global-set-key (kbd "M-i") #'imenu)
(global-set-key (kbd "M-x") #'smex)
#+END_SRC

* Core packages
#+BEGIN_SRC emacs-lisp
(use-package diminish)

;; Rainbow mode - displays color codes in their color
(use-package rainbow-mode
  :delight)

;; Theme
(use-package cyberpunk-theme
  :config
  (load-theme 'cyberpunk t))

;; This required some fonts to be downloaded, run `all-the-icons-install-fonts` manually
;; https://github.com/emacs-jp/replace-colorthemes
(use-package all-the-icons)

;; Parenthesis
(use-package highlight-parentheses
  :diminish 'highlight-parentheses-mode
  :config
  (add-hook 'prog-mode-hook #'highlight-parentheses-mode))

;; Ensure the environment variables inside emacs match the shell
(use-package exec-path-from-shell
  :defer t
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))

;; Undo-tree
(use-package undo-tree 
  :config
  (setq undo-tree-visualizer-timestamps t) 
  (setq undo-tree-visualizer-diff t)
  (setq undo-tree-auto-save-history t)
  ;; save all undo histories to this location
  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
  (defadvice undo-tree-make-history-save-file-name
      (after undo-tree activate)
    (setq ad-return-value (concat ad-return-value ".gz")))
  (global-undo-tree-mode)
  :defer t 
  :diminish 'undo-tree-mode)

;; Company mode
(use-package company 
  :diminish 'company-mode
  :config
  (setq company-tooltip-align-annotations t)
  (add-hook 'after-init-hook 'global-company-mode))

;; Show the argument list of a function in the echo area
(use-package eldoc
  :diminish eldoc-mode
  :commands turn-on-eldoc-mode
  :defer t)

;; Flyspell
(use-package flyspell 
  :config
  (add-hook 'prog-mode-hook 'flyspell-prog-mode) 
  :diminish 'flyspell-mode) 
;; Correct the misspelled word in a popup menu
(use-package flyspell-popup 
  :config
  (define-key flyspell-mode-map (kbd "C-;") #'flyspell-popup-correct)
  (define-key popup-menu-keymap (kbd "C-j") 'popup-next)
  (define-key popup-menu-keymap (kbd "C-k") 'popup-previous)
  (define-key popup-menu-keymap (kbd "C-l") 'popup-select))

;; Flycheck
(use-package flycheck
  :diminish flycheck-mode)

;; Yasnippet, a template system for emacs
(use-package yasnippet
  :bind (("TAB" . yas-expand))
  :config
  (yas-reload-all))

;; Display available keybindings in a popup
(use-package which-key
  :config
  (which-key-mode)
  (setq which-key-idle-delay config-which-key-delay)
  :diminish which-key-mode)

;; Highlight numbers for prog modes
(use-package highlight-numbers 
  :defer t 
  :init
  (add-hook 'prog-mode-hook 'highlight-numbers-mode))

;; Org mode, for keeping notes, todo lists, etc... in plain text
(use-package org
  :config
  ;; org
  (setq org-todo-keywords '("TODO" "STARTED" "WAITING" "DONE"))
  (setq org-agenda-include-diary t)
  (setq org-src-fontify-natively t)
  (setq org-agenda-files (list "~/org/agenda"
                               "~/org/agenda/projects/"))
  (setq org-default-notes-file "~/org/agenda/organizer.org"))

;; Respect editor configs
(use-package editorconfig
  :diminish editorconfig-mode
  :config
  (editorconfig-mode 1))

;; Syntax highlighting for docker files
(use-package dockerfile-mode
  :defer t)

;; A better "help" buffer
(use-package helpful)

;; Edit text area in chrome with emacs
(use-package atomic-chrome
  :config
  (atomic-chrome-start-server)
  (setq atomic-chrome-buffer-open-style 'frame))

;; Builds a list of recently opened files
(use-package recentf
  :config
  (setq recentf-max-saved-items 10
        recentf-max-menu-items 5
        recentf-save-file (concat user-emacs-directory ".cache/recentf")
        recentf-auto-cleanup 'never)
  (recentf-mode 1)

  (add-to-list 'recentf-exclude (expand-file-name package-user-dir))
  (add-to-list 'recentf-exclude "COMMIT_EDITMSG\\'")
  (add-to-list 'recentf-exclude (expand-file-name (concat user-emacs-directory ".cache/")))
  (add-hook 'delete-terminal-functions (lambda (terminal) (recentf-save-list))))

;; Display used hotkeys in another window
(use-package command-log-mode
  :diminish command-log-mode)
#+END_SRC


* evil
#+BEGIN_SRC emacs-lisp
(defun temporarily-apply-emacs-state ()
  "Enter emacs state when entering certain modes, then back to whatever it was"
  (if (cond ((bound-and-true-p edebug-mode)))
      (evil-emacs-state)
    (evil-exit-emacs-state)))

;; For some modes, setting default-state is not enough to get them into emacs state
(add-hook 'edebug-mode-hook 'temporarily-apply-emacs-state)

;; Extensible vi layer for emacs
(use-package evil
  :config
  (evil-mode 1)
  ;; Make emacs the default state
  (setq evil-default-state 'emacs)
  ;; Clear the motion-state so Info-mode, help-mode, etc.. will get into emacs state
  (setq evil-motion-state-modes nil)

  ;; Whitelist of modes to defeault to normal state
  ;; Generally speaking if I can edit it, I want it normal state, otherwise emacs
  (evil-set-initial-state 'gfm-mode 'normal)
  (evil-set-initial-state 'org-mode 'normal)
  (evil-set-initial-state 'outline-mode 'emacs)
  (evil-set-initial-state 'prog-mode 'normal)
  (evil-set-initial-state 'text-mode 'normal)

  ;; set cursor color according to mode
  (setq evil-normal-state-cursor '("DarkGoldenrod2" box))
  (setq evil-insert-state-cursor '("chartreuse3"  box))
  (setq evil-visual-state-cursor '("gray" box))
  (setq evil-operator-state-cursor '("cyan" box))
  (setq evil-replace-state-cursor '("chocolate" box))
  (setq evil-motion-state-cursor '("plum3" box))
  (setq evil-emacs-state-cursor  '("SkyBlue2" box))

  ;; Customizable key sequence to escape from insert state and everything else
  (use-package evil-escape
    :config
    (setq-default evil-escape-key-sequence "fd")
    ;; esc should escape everything possible
    (evil-escape-mode)
    :diminish 'evil-escape-mode)

  ;; Surround text objects with characters
  (use-package evil-surround
    :config
    (global-evil-surround-mode 1))

  ;; Highlight search words in a buffer
  (use-package evil-anzu
    :config
    (global-anzu-mode +1)
    :diminish 'anzu-mode))
#+END_SRC

* git
#+BEGIN_SRC emacs-lisp
;; A git interface for emacs
(use-package magit
  :config
  (setq magit-refresh-status-buffer nil)
  :diminish 'auto-revert-mode
  :defer t)

;; Show diffs in the gutter
(use-package diff-hl
  :config
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  (global-diff-hl-mode t)
  (diff-hl-flydiff-mode t))
#+END_SRC

* ido
#+BEGIN_SRC emacs-lisp
(defun ido-recentf-open ()
  "Use `ido-completing-read' to \\[find-file] a recent file"
  (interactive)
  (if (find-file (ido-completing-read "Find recent file: " recentf-list))
      (message "Opening file...")
    (message "Aborting")))

;; A completion engine that uses fuzzy matching
(use-package ido
  :init
  (ido-mode 1)
  (setq ido-everywhere t)
  (add-to-list 'ido-ignore-directories "node_modules")
  :defer t)

;; M-x enhancement for emacs built on top of ido
(use-package smex)

;; Fancy matching for emacs
(use-package flx-ido
  :init
  (flx-ido-mode 1)
  :defer t)
#+END_SRC

* projectile
#+BEGIN_SRC emacs-lisp
;; The platinum searcher
(use-package pt)

;; A project interaction library
(use-package projectile
  :after (pt)
  :config
  (setq projectile-project-search-path '("~/dev"))
  (add-to-list 'projectile-globally-ignored-directories "node_modules")
  (projectile-global-mode)
  :init
  (setq projectile-cache-file (concat user-emacs-directory ".cache/projectile.cache")
        projectile-known-projects-file (concat user-emacs-directory
                                               ".cache/projectile-bookmarks.eld"))
  (add-hook 'find-file-hook (lambda ()
                              (unless recentf-mode (recentf-mode)
                                      (recentf-track-opened-file))))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :bind
  (:map projectile-mode-map ("C-c p s p" . projectile-pt))
  :diminish 'projectile-mode)
#+END_SRC


* Language cpp
#+BEGIN_SRC emacs-lisp
;; A flycheck checker for C/C++
(use-package flycheck-irony)

;; Irony support for C/C++
(use-package irony-eldoc
  :init
  (add-hook 'irony-mode-hook #'irony-eldoc))

;; C++ minor mode, completion, syntax checking
(use-package irony
  ;; Need to install the server on first run (M-x irony-install-server)
  :commands irony-mode
  :init
  (add-hook 'c++-mode-hook 'irony-mode)
  (add-hook 'c-mode-hook 'irony-mode)
  (defun my-irony-mode-hook ()
    (setq irony-additional-clang-options '("-std=c++14")))
  (add-hook 'irony-mode-hook 'my-irony-mode-hook)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

;; Embedded platform development
(use-package platformio-mode
  :commands (platformio-conditionally-enable)
  :mode (("\\.ino\\'" . c++-mode))
  :init)

(defun platformio-hook ()
  (platformio-conditionally-enable))

(eval-after-load 'flycheck
  '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))

(add-hook 'c++-mode-hook 'platformio-hook)
(add-hook 'irony-mode-hook
          (lambda ()
            (irony-cdb-autosetup-compile-options)))
(add-hook 'c++-mode-hook 'flycheck-mode)
#+END_SRC
* Language elisp
#+BEGIN_SRC emacs-lisp
;; Minor mode for performing structured editing of S-expression data
(use-package paredit
  :init
  (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
  (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
  (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
  (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
  (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
  :config
  (eldoc-add-command
   'paredit-backward-delete
   'paredit-close-round))
#+END_SRC

* Language javascript
#+BEGIN_SRC emacs-lisp
(defun enable-skewer-mode ()
  ;; Run all the things required to make skewer mode work
  (interactive)
  (js2-mode)
  (skewer-mode)
  (run-skewer))

(defun configure-web-mode-flycheck-checkers ()
  ;; In order to have flycheck enabled in web-mode, add an entry to this
  ;; cond that matches the web-mode engine/content-type/etc and returns the
  ;; appropriate checker.
  (-when-let (checker (cond
                       ((string= web-mode-content-type "jsx")
                        'javascript-eslint)))

    (flycheck-mode)

    ;; See if there is a node_modules directory
    (let* ((root (locate-dominating-file
                  (or (buffer-file-name) default-directory)
                  "node_modules"))
           (eslint (or (and root
                            ;; Try the locally installed eslint
                            (expand-file-name "node_modules/eslint/bin/eslint.js" root))

                       ;; Try the global installed eslint
                       (concat (string-trim (shell-command-to-string "npm config get prefix")) "/bin/eslint"))))

      (when (and eslint (file-executable-p eslint))
        (setq-local flycheck-javascript-eslint-executable eslint)))

    (flycheck-select-checker checker)))

(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1))

;; Use eslint with web-mode for js[x]? files
(flycheck-add-mode 'javascript-eslint 'web-mode)
(flycheck-add-mode 'typescript-tslint 'web-mode)
(add-hook 'web-mode-hook #'configure-web-mode-flycheck-checkers)

(add-to-list 'auto-mode-alist '("\\.js[x]?'" . web-mode))
(add-hook 'web-mode-hook #'yas-minor-mode)

;; SASS
(use-package scss-mode)

;; Major mode for editing web templates
(use-package web-mode
  :mode (("\\.html?\\'" . web-mode)
         ("\\.js[x]?\\'" . web-mode)
         ("\\.css\\'" . web-mode))
  :config
  (defadvice web-mode-highlight-part (around tweak-jsx activate)
    (if (equal web-mode-content-type "jsx")
        (let ((web-mode-enable-part-face nil))
          ad-do-it)
      ad-do-it))

  (defadvice web-mode-highlight-part (around tweak-jsx activate)
    (if (equal web-mode-content-type "js")
        (let ((web-mode-enable-part-face nil))
          ad-do-it)
      ad-do-it))

  ;; Disable lining up the args
  (add-to-list 'web-mode-indentation-params '("lineup-args" . nil))
  (add-to-list 'web-mode-indentation-params '("lineup-calls" . nil))
  (add-to-list 'web-mode-indentation-params '("lineup-concats" . nil))
  (add-to-list 'web-mode-indentation-params '("lineup-ternary" . nil))
  :init
  (setq web-mode-content-types-alist
        '(("jsx" . "\\.js[x]?\\'")
          ("javascript" . "\\.es6?\\'")))

  (setq-default indent-tabs-mode nil)
  ;; Disable auto-quoting
  (setq web-mode-enable-auto-quoting nil)
  (setq web-mode-markup-indent-offset config-indent-web-mode-spaces)
  (setq web-mode-css-indent-offset config-indent-web-mode-spaces)
  (setq web-mode-code-indent-offset config-indent-web-mode-spaces)
  ;; Don't lineup element attributes
  (setq web-mode-attr-indent-offset config-indent-web-mode-spaces)
  ;; Automatically close tag
  (setq web-mode-enable-auto-pairing t)
  (setq web-mode-enable-css-colorization t))

;; TypeScript Interactive Development Environment
(use-package tide
  :bind
  ("M-." . tide-jump-to-definition)
  :config
  (add-hook 'web-mode-hook
            (lambda ()
              (when (string-match-p "js[x]?" (file-name-extension buffer-file-name))
                (setup-tide-mode)))))

;; A simple emacs web server for use with skewer-mode
(use-package simple-httpd)
;; Provides live interaction with JavaScript
(use-package skewer-mode)
#+END_SRC

* Language markdown
#+BEGIN_SRC emacs-lisp
;; Major mode for editing Markdown formatted text
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC

* Language rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :config
  ;; rust completion library
  (use-package racer
    :init
    (add-hook 'racer-mode-hook #'eldoc-mode)
    (add-hook 'rust-mode-hook #'racer-mode))
  (use-package flycheck-rust
    :init
    (add-hook 'rust-mode-hook #'flycheck-mode))
  (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))

;; rust package managment
(use-package cargo
  :bind (:map rust-mode-map ("C-c C-c" . cargo-process-clippy)))

(add-hook 'rust-mode-hook #'yas-minor-mode)
#+END_SRC

* Language clojure
#+BEGIN_SRC emacs-lisp
(use-package cider)
#+END_SRC
