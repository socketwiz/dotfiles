
* Core
  #+BEGIN_SRC emacs-lisp
  (package-initialize)

  (defvar config-scratch-mode 'text-mode)

  (defvar config-which-key-delay 0.4)

  (defvar config-keep-backups t)

  ;; font settings
  ;; font-height is 1/10pt so 160 == 160/10 == 16pt
  (defvar config-font-family "Source Code Pro")
  (defvar config-font-height 160)

  (setq use-package-always-ensure t)
  (setq gc-cons-threshold most-positive-fixnum)

  ;; Set regex syntax to string for re-builder
  (setq reb-re-syntax 'string)

  ;; Hide column numbers
  (setq column-number-mode t)

  ;; Draw underline lower
  (setq x-underline-at-descent-line t)

  ;; Hide ui elements
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (toggle-scroll-bar -1)

  ;; keep backups
  (setq make-backup-files config-keep-backups)

  ;; Save ALL backup files to this location
  (setq backup-directory-alist `(("." . "~/.emacs.d/backups")))

  ;; Disable re-center of the cursor to the middle of page when scroll hits top or bottom of the page
  (setq scroll-conservatively 101)

  ;; Automatically scroll the compilation buffer
  (setq compilation-scroll-output t)

  (setq initial-major-mode config-scratch-mode) 

  ;; add /usr/local/bin to the path
  (setq exec-path (append exec-path '("/usr/local/bin")))

  ;; turn on line numbers
  (global-display-line-numbers-mode)
  (menu-bar-display-line-numbers-mode 'relative)

  (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))

  ;; Always hightlight current line
  (global-hl-line-mode t)

  ;; Y or n is enough for me
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Font
  (set-face-attribute 'default nil
                      :family config-font-family
                      :height config-font-height)

  ;; Parenthesis
  (show-paren-mode 1)

  ;; Frequently accessed files (C-x r j <letter>)
  (set-register ?i '(file . "~/.emacs.d/settings.org"))
  (set-register ?o '(file . "~/org/agenda/organizer.org"))
  (set-register ?w '(file . "~/org/wiki/index.org"))
  #+END_SRC

* Core keybindings
  #+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f5>") #'revert-buffer)
  (global-set-key (kbd "C-c a") #'org-agenda)
  (global-set-key (kbd "C-c c") #'org-capture)
  (global-set-key (kbd "C-c C-.") #'helpful-at-point)
  (global-set-key (kbd "C-c r") #'ido-recentf-open)
  (global-set-key (kbd "C-h b") #'describe-bindings)
  (global-set-key (kbd "C-h f") #'helpful-callable)
  (global-set-key (kbd "C-h k") #'helpful-key)
  (global-set-key (kbd "C-h v") #'helpful-variable)
  (global-set-key (kbd "C-x C-b") #'ibuffer)
  (global-set-key (kbd "C-x C-e") #'pp-eval-last-sexp)
  (global-set-key (kbd "C-x C-f") 'ido-find-file)
  (global-set-key (kbd "C-x g") #'magit-status)
  (global-set-key (kbd "C-x M-g") #'magit-dispatch-popup)
  (global-set-key (kbd "M-i") #'imenu)
  (global-set-key (kbd "M-x") #'smex)

  (use-package which-key
    :config
    (which-key-mode)
    (setq which-key-idle-delay config-which-key-delay)
    :diminish which-key-mode)
  #+END_SRC

* Core packages
  #+BEGIN_SRC emacs-lisp
  (use-package diminish)

  (use-package cyberpunk-theme
    :config
    (load-theme 'cyberpunk t)
    :ensure t)

  ;; Rainbow mode - displays color codes in their color
  (use-package rainbow-mode
    :delight
    :ensure t)

  ;; Theme
  ;; This required some fonts to be downloaded, run `all-the-icons-install-fonts` manually
  ;; https://github.com/emacs-jp/replace-colorthemes
  (use-package all-the-icons
    :ensure t)

  ;; parenthesis
  (use-package highlight-parentheses
    :diminish 'highlight-parentheses-mode
    :config
    (add-hook 'prog-mode-hook #'highlight-parentheses-mode))

  (use-package exec-path-from-shell
    :defer t
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))

  ;; init undo-tree
  (use-package undo-tree 
    :config
    (setq undo-tree-visualizer-timestamps t) 
    (setq undo-tree-visualizer-diff t)
    (setq undo-tree-auto-save-history t)
    ;; save all undo histories to this location
    (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
    (defadvice undo-tree-make-history-save-file-name
        (after undo-tree activate)
        (setq ad-return-value (concat ad-return-value ".gz")))
    (global-undo-tree-mode)
    :defer t 
    :diminish 'undo-tree-mode)

  ;; init company mode
  (use-package company 
    :diminish 'company-mode
    :config
    (setq company-tooltip-align-annotations t)
    (add-hook 'after-init-hook 'global-company-mode))

  (use-package eldoc
    :diminish eldoc-mode
    :commands turn-on-eldoc-mode
    :defer t)

  ;; init flyspell
  (use-package flyspell 
    :config
    (add-hook 'prog-mode-hook 'flyspell-prog-mode) 
    :diminish 'flyspell-mode) 
  (use-package flyspell-popup 
    :config
    (define-key flyspell-mode-map (kbd "C-;") #'flyspell-popup-correct)) 
  (define-key popup-menu-keymap (kbd "C-j") 'popup-next) 
  (define-key popup-menu-keymap (kbd "C-k") 'popup-previous) 
  (define-key popup-menu-keymap (kbd "C-l") 'popup-select)

  ;; init flycheck
  (use-package flycheck
    :diminish flycheck-mode
    :ensure t)

  ;; init yasnippet
  (use-package yasnippet
    :ensure t
    :bind (("TAB" . yas-expand))
    :config
    (yas-reload-all))

  ;;init highlight numbers for prog modes
  (use-package highlight-numbers 
    :defer t 
    :init
    (add-hook 'prog-mode-hook 'highlight-numbers-mode))

  ;; Org mode
  (use-package org
    :ensure t
    :config
    ;; org
    (setq org-todo-keywords '("TODO" "STARTED" "WAITING" "DONE"))
    (setq org-agenda-include-diary t)
    (setq org-src-fontify-natively t)
    (setq org-agenda-files (list "~/org/agenda"
                                "~/org/agenda/projects/"))
    (setq org-default-notes-file "~/org/agenda/organizer.org"))

  ;; Respect editor configs
  (use-package editorconfig
    :ensure t
    :diminish editorconfig-mode
    :config
    (editorconfig-mode 1))

  (use-package dockerfile-mode
    :defer t)

  (use-package helpful
    :ensure t)

  (use-package atomic-chrome
    :ensure t
    :config
    (atomic-chrome-start-server)
    (setq atomic-chrome-buffer-open-style 'frame))

  (use-package recentf
    :config
    (setq recentf-max-saved-items 10
        recentf-max-menu-items 5
        recentf-save-file (concat user-emacs-directory ".cache/recentf")
        recentf-auto-cleanup 'never)
    (recentf-mode 1)

    (add-to-list 'recentf-exclude (expand-file-name package-user-dir))
    (add-to-list 'recentf-exclude "COMMIT_EDITMSG\\'")
    (add-to-list 'recentf-exclude (expand-file-name (concat user-emacs-directory ".cache/")))
    (add-hook 'delete-terminal-functions (lambda (terminal) (recentf-save-list))))
  #+END_SRC


* evil
  #+BEGIN_SRC emacs-lisp
  (use-package evil
    :init
    ;; don't let modes override any states (!)
    (setq evil-overriding-maps nil
          evil-intercept-maps nil
          evil-pending-intercept-maps nil
          evil-pending-overriding-maps nil)
    :config
    (evil-mode 1)
    (define-key evil-normal-state-map [escape] 'keyboard-quit) 
    (define-key evil-visual-state-map [escape] 'keyboard-quit) 
    (define-key minibuffer-local-map [escape] 'abort-recursive-edit) 
    (define-key minibuffer-local-ns-map [escape] 'abort-recursive-edit) 
    (define-key minibuffer-local-completion-map [escape] 'abort-recursive-edit) 
    (define-key minibuffer-local-must-match-map [escape] 'abort-recursive-edit) 
    (define-key minibuffer-local-isearch-map [escape] 'abort-recursive-edit)

    (use-package evil-escape
       :config
       (setq-default evil-escape-key-sequence "fd")
       ;; esc should escape everything possible
       (evil-escape-mode)
       :diminish 'evil-escape-mode
       )

    (use-package evil-surround
       :config
       (global-evil-surround-mode 1))

    ;; evil-anzu for improving search result rendering
    (use-package evil-anzu
      :config
      (global-anzu-mode +1)
      :diminish 'anzu-mode)

    ;; set cursor color according to mode
    (setq evil-normal-state-cursor '("DarkGoldenrod2" box))
    (setq evil-insert-state-cursor '("chartreuse3"  box))
    (setq evil-visual-state-cursor '("gray" box))
    (setq evil-operator-state-cursor '("cyan" box))
    (setq evil-replace-state-cursor '("chocolate" box))
    (setq evil-motion-state-cursor '("plum3" box))
    (setq evil-emacs-state-cursor  '("SkyBlue2" box))

    ;; disable these keys for use in other modes
    (define-key evil-normal-state-map (kbd "C-n") nil)
    (define-key evil-motion-state-map (kbd "C-o") nil)
    (define-key evil-normal-state-map (kbd "M-.") nil)

    ;; disable evil for these modes
    (cl-loop for (mode . state)
        in '((bc-menu-mode . emacs)
                (calc-mode . emacs)
                (calculator-mode . emacs)
                (calendar-mode . emacs)
                (debugger-mode . emacs)
                (dired-mode . emacs)
                (git-rebase-mode . emacs)
                (grep-mode . emacs)
                (help-mode . emacs)
                (helpful-mode . emacs)
                (Info-mode . emacs)
                (magit-branch-manager-mode . emacs)
                (magit-popup-mode . emacs)
                (magit-refs-mode . emacs)
                (rdictcc-buffer-mode . emacs)
                (term-mode . emacs))
        do (evil-set-initial-state mode state))

    ;; subvert evil-operation.el overrides (dired, ibuffer etc.)
    (advice-add 'evil-make-overriding-map :override #'ignore)
    (advice-add 'evil-make-intercept-map  :override #'ignore)
    (advice-add 'evil-add-hjkl-bindings   :override #'ignore))
  #+END_SRC

* git
  #+BEGIN_SRC emacs-lisp
  (use-package magit
    :config
    (setq magit-refresh-status-buffer nil)
    :diminish 'auto-revert-mode
    :defer t)

  ;; Show diffs in the gutter
  (use-package diff-hl
    :ensure t
    :config
    (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
    (global-diff-hl-mode t)
    (diff-hl-flydiff-mode t))
  #+END_SRC

* ido
  #+BEGIN_SRC emacs-lisp
  (use-package ido
    :init
    (ido-mode 1)
    (setq ido-everywhere t)
    (add-to-list 'ido-ignore-directories "node_modules")
    :defer t)

  ;; M-x enhancement for emacs built on top of ido
  (use-package smex
    :ensure t)

  ;; fancy matching for emacs
  (use-package flx-ido
    :init
    (flx-ido-mode 1)
    :defer t)

  (defun ido-recentf-open ()
    "Use `ido-completing-read' to \\[find-file] a recent file"
    (interactive)
    (if (find-file (ido-completing-read "Find recent file: " recentf-list))
        (message "Opening file...")
      (message "Aborting")))
  #+END_SRC

* projectile
  #+BEGIN_SRC emacs-lisp
  ;; the platinum searcher
  (use-package pt
    :ensure t)

  (use-package projectile 
    :after (pt)
    :config
    (add-to-list 'projectile-globally-ignored-directories "node_modules")
    (projectile-global-mode)
    :init
    (setq projectile-cache-file (concat user-emacs-directory ".cache/projectile.cache")
          projectile-known-projects-file (concat user-emacs-directory
                                             ".cache/projectile-bookmarks.eld"))
    (add-hook 'find-file-hook (lambda () 
                                (unless recentf-mode (recentf-mode) 
                                        (recentf-track-opened-file)))) 
    :bind (
        ("C-c p *" . projectile-pt)
        ("C-c p f" . projectile-find-file)
        ("C-c p p" . projectile-switch-project)
    )
    :diminish 'projectile-mode) 

  #+END_SRC


* Language cpp
  #+BEGIN_SRC emacs-lisp
  (use-package flycheck-irony
    :ensure t)

  (use-package irony-eldoc
    :ensure t
    :init
    (add-hook 'irony-mode-hook #'irony-eldoc))

  ;; c++ minor mode, completion, syntax checking
  (use-package irony
    :ensure t
    :commands irony-mode ; need to install the server on first run (M-x irony-install-server)
    :init
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (defun my-irony-mode-hook ()
      (setq irony-additional-clang-options '("-std=c++14")))
    (add-hook 'irony-mode-hook 'my-irony-mode-hook)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  ;; embedded platform development
  (use-package platformio-mode
    :ensure t
    :commands (platformio-conditionally-enable)
    :mode (("\\.ino\\'" . c++-mode))
    :init)

  (defun platformio-hook ()
    (platformio-conditionally-enable))

  (eval-after-load 'flycheck
    '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))

  (add-hook 'c++-mode-hook 'platformio-hook)
  (add-hook 'irony-mode-hook
            (lambda ()
              (irony-cdb-autosetup-compile-options)))
  (add-hook 'c++-mode-hook 'flycheck-mode)

  #+END_SRC
* Language elisp
  #+BEGIN_SRC emacs-lisp
  (defun edebug-disable-evil ()
    "Disable evil-mode when in the edebugger"
    (evil-make-overriding-map edebug-mode-map 'normal)
    (evil-normalize-keymaps))

  (use-package paredit
    :ensure t
    :init
    (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
    (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    (add-hook 'scheme-mode-hook           #'enable-paredit-mode)
    (add-hook 'edebug-mode-hook           #'edebug-disable-evil)
    :config
    (eldoc-add-command
      'paredit-backward-delete
      'paredit-close-round))
  #+END_SRC

* Language javascript
  #+BEGIN_SRC emacs-lisp
  (defun configure-web-mode-flycheck-checkers ()
    ;; in order to have flycheck enabled in web-mode, add an entry to this
    ;; cond that matches the web-mode engine/content-type/etc and returns the
    ;; appropriate checker.
    (-when-let (checker (cond
                      ((string= web-mode-content-type "jsx")
                          'javascript-eslint)))

      (flycheck-mode)

      ;; see if there is a node_modules directory
      (let* ((root (locate-dominating-file
                  (or (buffer-file-name) default-directory)
                  "node_modules"))
          (eslint (or (and root
                              ;; try the locally installed eslint
                              (expand-file-name "node_modules/eslint/bin/eslint.js" root))

                      ;; try the global installed eslint
                      (concat (string-trim (shell-command-to-string "npm config get prefix")) "/bin/eslint"))))

      (when (and eslint (file-executable-p eslint))
          (setq-local flycheck-javascript-eslint-executable eslint)))

      (flycheck-select-checker checker)))

  (defun setup-tide-mode ()
    (interactive)
    (tide-setup)
    (eldoc-mode +1)
    (tide-hl-identifier-mode +1))

  ;; sass
  (use-package scss-mode)
  (use-package web-mode
    :ensure t
    :mode (("\\.html?\\'" . web-mode)
           ("\\.js[x]?\\'" . web-mode)
           ("\\.css\\'" . web-mode))
    :config
    (defadvice web-mode-highlight-part (around tweak-jsx activate)
      (if (equal web-mode-content-type "jsx")
          (let ((web-mode-enable-part-face nil))
            ad-do-it)
        ad-do-it))

    (defadvice web-mode-highlight-part (around tweak-jsx activate)
      (if (equal web-mode-content-type "js")
          (let ((web-mode-enable-part-face nil))
            ad-do-it)
        ad-do-it))

    ;; disable lining up the args
    (add-to-list 'web-mode-indentation-params '("lineup-args" . nil))
    (add-to-list 'web-mode-indentation-params '("lineup-calls" . nil))
    (add-to-list 'web-mode-indentation-params '("lineup-concats" . nil))
    (add-to-list 'web-mode-indentation-params '("lineup-ternary" . nil))
    :init
    (setq web-mode-content-types-alist
          '(("jsx" . "\\.js[x]?\\'")
            ("javascript" . "\\.es6?\\'")))

    ;; disable auto-quoting
    (setq web-mode-enable-auto-quoting nil)
    ;; indent with 4 spaces
    (setq-default indent-tabs-mode nil)
    (setq web-mode-markup-indent-offset 4)
    (setq web-mode-css-indent-offset 4)
    (setq web-mode-code-indent-offset 4)
    ;; automatically close tag
    (setq web-mode-enable-auto-pairing t)
    (setq web-mode-enable-css-colorization t)
    ;; don't lineup element attributes
    (setq web-mode-attr-indent-offset 4))

  ;; TypeScript Interactive Development Environment
  (use-package tide
    :ensure t
    :defer 1
    :bind
    ("M-." . tide-jump-to-definition)
    :config
    (add-hook 'web-mode-hook
              (lambda ()
                (when (string-match-p "js[x]?" (file-name-extension buffer-file-name))
                  (setup-tide-mode)))))

  ;; use eslint with web-mode for js[x]? files
  (flycheck-add-mode 'javascript-eslint 'web-mode)
  (flycheck-add-mode 'typescript-tslint 'web-mode)
  (add-hook 'web-mode-hook #'configure-web-mode-flycheck-checkers)

  (add-to-list 'auto-mode-alist '("\\.js[x]?'" . web-mode))
  (add-hook 'web-mode-hook #'yas-minor-mode)

  #+END_SRC
* Language markdown
  #+BEGIN_SRC emacs-lisp
  (defun my/init-markdown ()
    (use-package markdown-mode
        :defer t
        :commands (markdown-mode gfm-mode)
        :mode (("README\\.md\\'" . gfm-mode)
            ("\\.md\\'" . markdown-mode)
            ("\\.markdown\\'" . markdown-mode))
        :init (setq markdown-command "multimarkdown")))
  #+END_SRC

* Language rust
  #+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :config
    ;; rust completion library
    (use-package racer
        :init
        (add-hook 'racer-mode-hook #'eldoc-mode)
        (add-hook 'rust-mode-hook #'racer-mode)
        :ensure t)
    (use-package flycheck-rust
        :init
        (add-hook 'rust-mode-hook #'flycheck-mode)
        :ensure t)
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)
    :ensure t)

  ;; rust package managment
  (use-package cargo
    :bind (:map rust-mode-map ("C-c C-b" . cargo-process-build))
    :bind (:map rust-mode-map ("C-c C-c" . cargo-process-clippy))
    :bind (:map rust-mode-map ("C-c C-r" . cargo-process-run))
    :ensure t)

  (add-hook 'rust-mode-hook #'yas-minor-mode)
  #+END_SRC
