// @Compiler-Transpile "true"
// @Compiler-Output "../dist/main.js"

const Cluster = require('cluster')
const ChildProcess = require('child_process')
const Communication = require('sb-communication')

class CPPromise {
  constructor(target, debug) {
    if (typeof target === 'string') {
      this.target = ChildProcess.fork(target)
    } else if(target) {
      this.target = target
    } else {
      this.target = process
    }
    this.communication = new Communication(debug)
    this.sendCallback = data => { this.target.send(data) }
    this.target.on('message', message => { this.communication.gotMessage(this.sendCallback, message) })
  }
  on(type, callback) {
    return this.communication.on(type, callback)
  }
  request(type, message) {
    return this.communication.request(this.sendCallback, type, message)
  }
  disconnect() {
    this.target.disconnect()
  }
  kill(sig) {
    this.target.kill(sig)
  }
  static randomId() {
    return (Math.random().toString(36)+'00000000000000000').slice(2, 7+2)
  }
  static fork(env) {
    return new CPPromise(Cluster.fork(env || process.env))
  }
}

CPPromise.isWorker = Cluster.isWorker
CPPromise.isMaster = !CPPromise.isWorker

module.exports = CPPromise
