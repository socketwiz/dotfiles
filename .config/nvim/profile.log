FUNCTION  3()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot.vim:633
Called 1 time
Total time:   0.000000
 Self time:   0.000000

count  total (s)   self (s)
    1   0.000045   0.000016   let startup_error = copilot#Agent().StartupError()
    1              0.000002   if !empty(startup_error)
                                  echo 'Copilot: ' . startup_error
                                  return
    1              0.000000   endif
                            
    1   0.000320   0.000007   let browser = copilot#Browser()
                            
    1   0.002470   0.000009   let status = copilot#Call('checkStatus', {})
    1              0.000002   if has_key(status, 'user')
                                let data = {'status': 'AlreadySignedIn', 'user': status.user}
    1              0.000001   else
    1   0.436246   0.000013     let data = copilot#Call('signInInitiate', {})
    1              0.000000   endif
                            
    1              0.000001   if has_key(data, 'verificationUri')
    1              0.000001     let uri = data.verificationUri
    1              0.000005     if has('clipboard')
    1              0.028182       let @+ = data.userCode
    1              0.008743       let @* = data.userCode
    1              0.000000     endif
    1   0.000064   0.000007     call s:Echo("First copy your one-time code: " . data.userCode)
    1              0.000000     try
    1              0.000002       if len(&mouse)
    1              0.000001         let mouse = &mouse
    1   0.000007   0.000006         set mouse=
    1              0.000000       endif
    1              0.000001       if get(a:opts, 'bang')
                                    call s:Echo("In your browser, visit " . uri)
    1              0.000001       elseif len(browser)
    1   0.000026   0.000003         call s:Echo("Press ENTER to open GitHub in your browser")
    1   0.305149   0.300412         let c = getchar()
    4              0.000074         while c isnot# 13 && c isnot# 10 && c isnot# 0
    3              0.003438           let c = getchar()
    3              0.000055         endwhile
                                    let status = {}
                                    call copilot#job#Stream(browser + [uri], v:null, v:null, function('s:BrowserCallback', [status]))
                                    let time = reltime()
                                    while empty(status) && reltimefloat(reltime(time)) < 5
                                      sleep 10m
                                    endwhile
                                    if get(status, 'code', browser[0] !=# 'xdg-open') != 0
                                      call s:Echo("Failed to open browser.  Visit " . uri)
                                    else
                                      call s:Echo("Opened " . uri)
                                    endif
                                  else
                                    call s:Echo("Could not find browser.  Visit " . uri)
                                  endif
                                  call s:Echo("Waiting (could take up to 5 seconds)")
                                  let request = copilot#Request('signInConfirm', {'userCode': data.userCode}).Wait()
                                finally
                                  if exists('mouse')
                                    let &mouse = mouse
                                  endif
                                endtry
                                if request.status ==# 'error'
                                  return 'echoerr ' . string('Copilot: Authentication failure: ' . request.error.message)
                                else
                                  let status = request.result
                                endif
                              elseif get(data, 'status', '') isnot# 'AlreadySignedIn'
                                return 'echoerr ' . string('Copilot: Something went wrong')
                              endif
                            
                              let user = get(status, 'user', '<unknown>')
                            
                              echo 'Copilot: Authenticated as GitHub user ' . user

FUNCTION  <SNR>21_Running()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot.vim:50
Called 5 times
Total time:   0.000030
 Self time:   0.000030

count  total (s)   self (s)
    5              0.000027   return exists('s:agent.job') || exists('s:agent.client_id')

FUNCTION  <SNR>62_RequestWait()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot/agent.vim:69
Called 3 times
Total time:   0.444840
 Self time:   0.444511

count  total (s)   self (s)
  387              0.000804   while self.status ==# 'running'
  384   0.443492   0.443164     sleep 1m
  387              0.000426   endwhile
    3              0.000030   while !empty(get(self, 'waiting', {}))
                                sleep 1m
    3              0.000003   endwhile
    3              0.000008   return self

FUNCTION  copilot#Agent()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot.vim:74
Called 5 times
Total time:   0.000115
 Self time:   0.000046

count  total (s)   self (s)
    5   0.000107   0.000038   call s:Start()
    5              0.000004   return s:agent

FUNCTION  copilot#OnVimLeavePre()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot.vim:445
Called 1 time
Total time:   0.000002
 Self time:   0.000002

count  total (s)   self (s)

FUNCTION  <SNR>61_try_cmd()
    Defined: /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/provider/clipboard.vim:38
Called 2 times
Total time:   0.036832
 Self time:   0.000176

count  total (s)   self (s)
    2   0.036813   0.000157   let out = systemlist(a:cmd, (a:0 ? a:1 : ['']), 1)
    2              0.000003   if v:shell_error
                                if !exists('s:did_error_try_cmd')
                                  echohl WarningMsg
                                  echomsg "clipboard: error: ".(len(out) ? out[0] : v:shell_error)
                                  echohl None
                                  let s:did_error_try_cmd = 1
                                endif
                                return 0
    2              0.000001   endif
    2              0.000001   return out

FUNCTION  <SNR>20_Event()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/plugin/copilot.vim:45
Called 70 times
Total time:   0.004170
 Self time:   0.001333

count  total (s)   self (s)
   70              0.000119   try
   70   0.003693   0.000856     call call('copilot#On' . a:type, [])
                              catch
                                call copilot#logger#Exception('autocmd.' . a:type)
   70              0.000045   endtry

FUNCTION  copilot#Browser()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot.vim:501
Called 1 time
Total time:   0.000313
 Self time:   0.000313

count  total (s)   self (s)
    1              0.000005   if type(get(g:, 'copilot_browser')) == v:t_list
                                let cmd = copy(g:copilot_browser)
    1              0.000003   elseif type(get(g:, 'open_command')) == v:t_list
                                let cmd = copy(g:open_command)
    1              0.000011   elseif has('win32')
                                let cmd = ['rundll32', 'url.dll,FileProtocolHandler']
    1              0.000001   elseif has('mac')
    1              0.000001     let cmd = ['open']
                              elseif executable('wslview')
                                return ['wslview']
                              elseif executable('xdg-open')
                                return ['xdg-open']
                              else
                                return []
    1              0.000000   endif
    1              0.000276   if executable(get(cmd, 0, ''))
    1              0.000002     return cmd
                              else
                                return []
                              endif

FUNCTION  copilot#Command()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot.vim:778
Called 1 time
Total time:   0.000000
 Self time:   0.000000

count  total (s)   self (s)
    1              0.000052   let cmd = matchstr(a:arg, '^\%(\\.\|\S\)\+')
    1              0.000010   let arg = matchstr(a:arg, '\s\zs\S.*')
    1              0.000003   if cmd ==# 'log'
                                return a:mods . ' split +$ ' . fnameescape(copilot#logger#File())
    1              0.000002   endif
    1              0.000010   if !empty(cmd) && !has_key(s:commands, tr(cmd, '-', '_'))
                                return 'echoerr ' . string('Copilot: unknown command ' . string(cmd))
    1              0.000000   endif
    1              0.000001   try
    1   0.000124   0.000058     let err = copilot#Agent().StartupError()
    1              0.000002     if !empty(err)
                                  return 'echo ' . string('Copilot: ' . err)
    1              0.000001     endif
    1              0.000001     try
    1   0.007402   0.000021       let opts = copilot#Call('checkStatus', {'options': {'localChecksOnly': v:true}})
                                catch
                                  call copilot#logger#Exception()
                                  let opts = {'status': 'VimException'}
    1              0.000001     endtry
    1              0.000002     if empty(cmd)
                                  if opts.status ==# 'VimException'
                                    return a:mods . ' split +$ ' . fnameescape(copilot#logger#File())
                                  elseif opts.status !=# 'OK' && opts.status !=# 'MaybeOK'
                                    let cmd = 'setup'
                                  else
                                    let cmd = 'panel'
                                  endif
    1              0.000000     endif
    1              0.000017     call extend(opts, {'line1': a:line1, 'line2': a:line2, 'range': a:range, 'bang': a:bang, 'mods': a:mods, 'arg': arg})
                                let retval = s:commands[tr(cmd, '-', '_')](opts)
                                if type(retval) == v:t_string
                                  return retval
                                else
                                  return ''
                                endif
                              catch /^Copilot:/
                                return 'echoerr ' . string(v:exception)
                              endtry

FUNCTION  <SNR>62_RequestAwait()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot/agent.vim:79
Called 3 times
Total time:   0.444931
 Self time:   0.000091

count  total (s)   self (s)
    3   0.444910   0.000070   call self.Wait()
    3              0.000010   if has_key(self, 'result')
    3              0.000006     return self.result
                              endif
                              throw 'Copilot:E' . self.error.code . ': ' . self.error.message

FUNCTION  <SNR>62_LspRequest()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot/agent.vim:339
Called 3 times
Total time:   0.000900
 Self time:   0.000733

count  total (s)   self (s)
    3   0.000689   0.000679   let id = eval("v:lua.require'_copilot'.lsp_request(self.id, a:method, a:params)")
    3              0.000007   if id isnot# v:null
    3   0.000198   0.000041     return call('s:SetUpRequest', [self, id, a:method, a:params] + a:000)
                              endif
                              if has_key(self, 'client_id')
                                call copilot#agent#LspExit(self.client_id, -1, -1)
                              endif
                              throw 'copilot#agent: LSP client not available'

FUNCTION  provider#clipboard#Call()
    Defined: /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/provider/clipboard.vim:242
Called 2 times
Total time:   0.036906
 Self time:   0.000027

count  total (s)   self (s)
    2              0.000003   if get(s:, 'here', v:false)  " Clipboard provider must not recurse. #7184
                                return 0
    2              0.000000   endif
    2              0.000002   let s:here = v:true
    2              0.000002   try
    2   0.036892   0.000013     return call(s:clipboard[a:method],a:args,s:clipboard)
    2              0.000001   finally
    2              0.000001     let s:here = v:false
    2              0.000002   endtry

FUNCTION  copilot#agent#LspResponse()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot/agent.vim:332
Called 3 times
Total time:   0.000180
 Self time:   0.000059

count  total (s)   self (s)
    3              0.000020   if !has_key(s:instances, a:agent_id)
                                return
    3              0.000002   endif
    3   0.000151   0.000031   call s:OnResponse(s:instances[a:agent_id], a:opts)

FUNCTION  <SNR>29_Highlight_Matching_Pair()
    Defined: /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/matchparen.vim:39
Called 2 times
Total time:   0.000141
 Self time:   0.000127

count  total (s)   self (s)
                              " Remove any previous match.
    2   0.000025   0.000011   call s:Remove_Matches()
                            
                              " Avoid that we remove the popup menu.
                              " Return when there are no colors (looks like the cursor jumps).
    2              0.000007   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
                                return
    2              0.000001   endif
                            
                              " Get the character under the cursor and check if it's in 'matchpairs'.
    2              0.000004   let c_lnum = line('.')
    2              0.000005   let c_col = col('.')
    2              0.000002   let before = 0
                            
    2              0.000007   let text = getline(c_lnum)
    2              0.000019   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
    2              0.000003   if empty(matches)
                                let [c_before, c] = ['', '']
    2              0.000001   else
    2              0.000007     let [c_before, c] = matches[1:2]
    2              0.000001   endif
    2              0.000017   let plist = split(&matchpairs, '.\zs[:,]')
    2              0.000006   let i = index(plist, c)
    2              0.000002   if i < 0
                                " not found, in Insert mode try character before the cursor
    2              0.000004     if c_col > 1 && (mode() == 'i' || mode() == 'R')
                                  let before = strlen(c_before)
                                  let c = c_before
                                  let i = index(plist, c)
    2              0.000001     endif
    2              0.000001     if i < 0
                                  " not found, nothing to do
    2              0.000004       return
                                endif
                              endif
                            
                              " Figure out the arguments for searchpairpos().
                              if i % 2 == 0
                                let s_flags = 'nW'
                                let c2 = plist[i + 1]
                              else
                                let s_flags = 'nbW'
                                let c2 = c
                                let c = plist[i - 1]
                              endif
                              if c == '['
                                let c = '\['
                                let c2 = '\]'
                              endif
                            
                              " Find the match.  When it was just before the cursor move it there for a
                              " moment.
                              if before > 0
                                let has_getcurpos = exists("*getcurpos")
                                if has_getcurpos
                                  " getcurpos() is more efficient but doesn't exist before 7.4.313.
                                  let save_cursor = getcurpos()
                                else
                                  let save_cursor = winsaveview()
                                endif
                                call cursor(c_lnum, c_col - before)
                              endif
                            
                              if !has("syntax") || !exists("g:syntax_on")
                                let s_skip = "0"
                              else
                                " Build an expression that detects whether the current cursor position is
                                " in certain syntax types (string, comment, etc.), for use as
                                " searchpairpos()'s skip argument.
                                " We match "escape" for special items, such as lispEscapeSpecial, and
                                " match "symbol" for lispBarSymbol.
                                let s_skip = 'synstack(".", col("."))' . '->indexof({_, id -> synIDattr(id, "name") =~? ' . '"string\\|character\\|singlequote\\|escape\\|symbol\\|comment"}) >= 0'
                                " If executing the expression determines that the cursor is currently in
                                " one of the syntax types, then we want searchpairpos() to find the pair
                                " within those syntax types (i.e., not skip).  Otherwise, the cursor is
                                " outside of the syntax types and s_skip should keep its value so we skip
                                " any matching pair inside the syntax types.
                                " Catch if this throws E363: pattern uses more memory than 'maxmempattern'.
                                try
                                  execute 'if ' . s_skip . ' | let s_skip = "0" | endif'
                                catch /^Vim\%((\a\+)\)\=:E363/
                                  " We won't find anything, so skip searching, should keep Vim responsive.
                                  return
                                endtry
                              endif
                            
                              " Limit the search to lines visible in the window.
                              let stoplinebottom = line('w$')
                              let stoplinetop = line('w0')
                              if i % 2 == 0
                                let stopline = stoplinebottom
                              else
                                let stopline = stoplinetop
                              endif
                            
                              " Limit the search time to 300 msec to avoid a hang on very long lines.
                              " This fails when a timeout is not supported.
                              if mode() == 'i' || mode() == 'R'
                                let timeout = exists("b:matchparen_insert_timeout") ? b:matchparen_insert_timeout : g:matchparen_insert_timeout
                              else
                                let timeout = exists("b:matchparen_timeout") ? b:matchparen_timeout : g:matchparen_timeout
                              endif
                              try
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline, timeout)
                              catch /E118/
                                " Can't use the timeout, restrict the stopline a bit more to avoid taking
                                " a long time on closed folds and long lines.
                                " The "viewable" variables give a range in which we can scroll while
                                " keeping the cursor at the same position.
                                " adjustedScrolloff accounts for very large numbers of scrolloff.
                                let adjustedScrolloff = min([&scrolloff, (line('w$') - line('w0')) / 2])
                                let bottom_viewable = min([line('$'), c_lnum + &lines - adjustedScrolloff - 2])
                                let top_viewable = max([1, c_lnum-&lines+adjustedScrolloff + 2])
                                " one of these stoplines will be adjusted below, but the current values are
                                " minimal boundaries within the current window
                                if i % 2 == 0
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = min([line2byte("$"), line2byte(".") + col(".") + &smc * 2])
                            	let stopline = min([bottom_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = min([bottom_viewable, c_lnum + 100])
                                  endif
                                  let stoplinebottom = stopline
                                else
                                  if has("byte_offset") && has("syntax_items") && &smc > 0
                            	let stopbyte = max([1, line2byte(".") + col(".") - &smc * 2])
                            	let stopline = max([top_viewable, byte2line(stopbyte)])
                                  else
                            	let stopline = max([top_viewable, c_lnum - 100])
                                  endif
                                  let stoplinetop = stopline
                                endif
                                let [m_lnum, m_col] = searchpairpos(c, '', c2, s_flags, s_skip, stopline)
                              endtry
                            
                              if before > 0
                                if has_getcurpos
                                  call setpos('.', save_cursor)
                                else
                                  call winrestview(save_cursor)
                                endif
                              endif
                            
                              " If a match is found setup match highlighting.
                              if m_lnum > 0 && m_lnum >= stoplinetop && m_lnum <= stoplinebottom 
                                if exists('*matchaddpos')
                                  call matchaddpos('MatchParen', [[c_lnum, c_col - before], [m_lnum, m_col]], 10, 3)
                                else
                                  exe '3match MatchParen /\(\%' . c_lnum . 'l\%' . (c_col - before) . 'c\)\|\(\%' . m_lnum . 'l\%' . m_col . 'c\)/'
                                endif
                                let w:paren_hl_on = 1
                              endif

FUNCTION  copilot#OnBufUnload()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot.vim:441
Called 69 times
Total time:   0.002835
 Self time:   0.000943

count  total (s)   self (s)
   69   0.002779   0.000887   call s:Reject(+expand('<abuf>'))

FUNCTION  <SNR>62_AgentStartupError()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot/agent.vim:488
Called 2 times
Total time:   0.000042
 Self time:   0.000042

count  total (s)   self (s)
    2              0.000025   while (has_key(self, 'job') || has_key(self, 'client_id')) && !has_key(self, 'startup_error') && !has_key(self, 'capabilities')
                                sleep 10m
    2              0.000003   endwhile
    2              0.000004   if has_key(self, 'capabilities')
    2              0.000002     return ''
                              else
                                return get(self, 'startup_error', 'Something unexpected went wrong spawning the agent')
                              endif

FUNCTION  <SNR>1_LoadFTPlugin()
    Defined: /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/ftplugin.vim:14
Called 4 times
Total time:   0.007704
 Self time:   0.007704

count  total (s)   self (s)
    4              0.000016     if exists("b:undo_ftplugin")
                                  exe b:undo_ftplugin
                                  unlet! b:undo_ftplugin b:did_ftplugin
    4              0.000003     endif
                            
    4              0.000014     let s = expand("<amatch>")
    4              0.000006     if s != ""
    4              0.000025       if &cpo =~# "S" && exists("b:did_ftplugin")
                            	" In compatible mode options are reset to the global values, need to
                            	" set the local values also when a plugin was already used.
                            	unlet b:did_ftplugin
    4              0.000002       endif
                            
                                  " When there is a dot it is used to separate filetype names.  Thus for
                                  " "aaa.bbb" load "aaa" and then "bbb".
    8              0.000019       for name in split(s, '\.')
                                    " Load Lua ftplugins after Vim ftplugins _per directory_
                                    " TODO(clason): use nvim__get_runtime when supports globs and modeline
    4              0.007570         exe printf('runtime! ftplugin/%s.vim ftplugin/%s.lua ftplugin/%s_*.vim ftplugin/%s_*.lua ftplugin/%s/*.vim ftplugin/%s/*.lua', name, name, name, name, name, name)
    8              0.000007       endfor
    4              0.000002     endif

FUNCTION  <SNR>60_SynSet()
    Defined: /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/syntax/synload.vim:26
Called 4 times
Total time:   0.002359
 Self time:   0.002359

count  total (s)   self (s)
                              " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
    4              0.000009   syn clear
    4              0.000005   if exists("b:current_syntax")
                                unlet b:current_syntax
    4              0.000001   endif
                            
    4              0.000008   0verbose let s = expand("<amatch>")
    4              0.000003   if s == "ON"
                                " :set syntax=ON
                                if &filetype == ""
                                  echohl ErrorMsg
                                  echo "filetype unknown"
                                  echohl None
                                endif
                                let s = &filetype
    4              0.000003   elseif s == "OFF"
                                let s = ""
    4              0.000001   endif
                            
    4              0.000002   if s != ""
                                " Load the syntax file(s).  When there are several, separated by dots,
                                " load each in sequence.  Skip empty entries.
    8              0.000012     for name in split(s, '\.')
    4              0.000005       if !empty(name)
    4              0.001210         exe "runtime! syntax/" . name . ".vim syntax/" . name . "/*.vim"
    4              0.001052         exe "runtime! syntax/" . name . ".lua syntax/" . name . "/*.lua"
    4              0.000001       endif
    8              0.000004     endfor
    4              0.000001   endif

FUNCTION  <SNR>29_Remove_Matches()
    Defined: /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/plugin/matchparen.vim:197
Called 2 times
Total time:   0.000014
 Self time:   0.000014

count  total (s)   self (s)
    2              0.000005   if exists('w:paren_hl_on') && w:paren_hl_on
                                silent! call matchdelete(3)
                                let w:paren_hl_on = 0
    2              0.000001   endif

FUNCTION  copilot#Call()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot.vim:104
Called 3 times
Total time:   0.446074
 Self time:   0.000107

count  total (s)   self (s)
    3   0.000095   0.000034   let agent = copilot#Agent()
    3   0.445975   0.000070   return call(agent.Call, [a:method, a:params] + a:000)

FUNCTION  13()
    Defined: /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/autoload/provider/clipboard.vim:183
Called 2 times
Total time:   0.036879
 Self time:   0.000047

count  total (s)   self (s)
    2              0.000002   if a:reg == '"'
                                call s:clipboard.set(a:lines,a:regtype,'+')
                                if s:copy['*'] != s:copy['+']
                                  call s:clipboard.set(a:lines,a:regtype,'*')
                                end
                                return 0
    2              0.000000   end
                            
    2              0.000003   if type(s:copy[a:reg]) == v:t_func
                                call s:copy[a:reg](a:lines, a:regtype)
                                return 0
    2              0.000000   end
                            
    2              0.000001   if s:cache_enabled == 0
    2   0.036842   0.000011     call s:try_cmd(s:copy[a:reg], a:lines)
                                "Cache it anyway we can compare it later to get regtype of the yank
    2              0.000010     let s:selections[a:reg] = copy(s:selection)
    2              0.000003     let s:selections[a:reg].data = [a:lines, a:regtype]
    2              0.000001     return 0
                              end
                            
                              if s:selections[a:reg].owner > 0
                                let prev_job = s:selections[a:reg].owner
                              end
                              let s:selections[a:reg] = copy(s:selection)
                              let selection = s:selections[a:reg]
                              let selection.data = [a:lines, a:regtype]
                              let selection.argv = s:copy[a:reg]
                              let selection.detach = s:cache_enabled
                              let selection.cwd = "/"
                              let jobid = jobstart(selection.argv, selection)
                              if jobid > 0
                                call jobsend(jobid, a:lines)
                                call jobclose(jobid, 'stdin')
                                " xclip does not close stdout when receiving input via stdin
                                if selection.argv[0] ==# 'xclip'
                                  call jobclose(jobid, 'stdout')
                                endif
                                let selection.owner = jobid
                                let ret = 1
                              else
                                echohl WarningMsg
                                echomsg 'clipboard: failed to execute: '.(s:copy[a:reg])
                                echohl None
                                let ret = 1
                              endif
                            
                              " The previous provider instance should exit when the new one takes
                              " ownership, but kill it to be sure we don't fill up the job table.
                              if exists('prev_job')
                                call timer_start(1000, {... -> jobwait([prev_job], 0)[0] == -1 && jobstop(prev_job)})
                              endif
                            
                              return ret

FUNCTION  <SNR>62_OnResponse()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot/agent.vim:268
Called 3 times
Total time:   0.000120
 Self time:   0.000120

count  total (s)   self (s)
    3              0.000011   let response = a:response
    3              0.000009   let id = get(a:response, 'id', v:null)
    3              0.000006   if !has_key(a:agent.requests, id)
                                return
    3              0.000001   endif
    3              0.000010   let request = remove(a:agent.requests, id)
    3              0.000004   if request.status ==# 'canceled'
                                return
    3              0.000001   endif
    3              0.000008   let request.waiting = {}
    3              0.000005   let resolve = remove(request, 'resolve')
    3              0.000005   let reject = remove(request, 'reject')
    3              0.000004   if has_key(response, 'result')
    3              0.000004     let request.status = 'success'
    3              0.000004     let request.result = response.result
    3              0.000012     for Cb in resolve
                                  let request.waiting[timer_start(0, function('s:Callback', [request, 'result', Cb]))] = 1
    3              0.000002     endfor
                              else
                                let request.status = 'error'
                                let request.error = response.error
                                for Cb in reject
                                  let request.waiting[timer_start(0, function('s:Callback', [request, 'error', Cb]))] = 1
                                endfor
    3              0.000001   endif

FUNCTION  <SNR>62_SetUpRequest()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot/agent.vim:95
Called 3 times
Total time:   0.000157
 Self time:   0.000157

count  total (s)   self (s)
    3              0.000062   let request = { 'agent_id': a:agent.id, 'id': a:id, 'method': a:method, 'params': a:params, 'Agent': function('s:RequestAgent'), 'Wait': function('s:RequestWait'), 'Await': function('s:RequestAwait'), 'Cancel': function('s:RequestCancel'), 'resolve': [], 'reject': [], 'status': 'running'}
    3              0.000012   let a:agent.requests[a:id] = request
    3              0.000007   let args = a:000[2:-1]
    3              0.000004   if len(args)
                                if !empty(a:1)
                                  call add(request.resolve, { v -> call(a:1, [v] + args)})
                                endif
                                if !empty(a:2)
                                  call add(request.reject, { v -> call(a:2, [v] + args)})
                                endif
                                return request
    3              0.000002   endif
    3              0.000004   if a:0 && !empty(a:1)
                                call add(request.resolve, a:1)
    3              0.000001   endif
    3              0.000005   if a:0 > 1 && !empty(a:2)
                                call add(request.reject, a:2)
    3              0.000001   endif
    3              0.000003   return request

FUNCTION  <SNR>21_Echo()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot.vim:18
Called 2 times
Total time:   0.000080
 Self time:   0.000080

count  total (s)   self (s)
    2              0.000005   if has('nvim') && &cmdheight == 0
    2              0.000071     call v:lua.vim.notify(a:msg, v:null, {'title': 'GitHub Copilot'})
                              else
                                echo a:msg
    2              0.000000   endif

FUNCTION  <SNR>21_Reject()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot.vim:131
Called 69 times
Total time:   0.001892
 Self time:   0.001892

count  total (s)   self (s)
   69              0.000055   try
   69              0.000396     let dict = getbufvar(a:bufnr, '_copilot')
   69              0.000509     if type(dict) == v:t_dict && !empty(get(dict, 'shown_choices', {}))
                                  call copilot#Request('notifyRejected', {'uuids': keys(dict.shown_choices)})
                                  let dict.shown_choices = {}
   69              0.000091     endif
                              catch
                                call copilot#logger#Exception()
   69              0.000090   endtry

FUNCTION  <SNR>62_AgentCall()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot/agent.vim:210
Called 3 times
Total time:   0.445905
 Self time:   0.000074

count  total (s)   self (s)
    3   0.000935   0.000035   let request = call(self.Request, [a:method, a:params] + a:000)
    3              0.000003   if a:0
                                return request
    3              0.000001   endif
    3   0.444959   0.000028   return request.Await()

FUNCTION  <SNR>2_LoadIndent()
    Defined: /opt/homebrew/Cellar/neovim/0.9.5/share/nvim/runtime/indent.vim:13
Called 4 times
Total time:   0.001039
 Self time:   0.001039

count  total (s)   self (s)
    4              0.000006     if exists("b:undo_indent")
                                  exe b:undo_indent
                                  unlet! b:undo_indent b:did_indent
    4              0.000002     endif
    4              0.000009     let s = expand("<amatch>")
    4              0.000004     if s != ""
    4              0.000004       if exists("b:did_indent")
                            	unlet b:did_indent
    4              0.000001       endif
                            
                                  " When there is a dot it is used to separate filetype names.  Thus for
                                  " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
    8              0.000012       for name in split(s, '\.')
    4              0.000527         exe 'runtime! indent/' . name . '.vim'
    4              0.000449         exe 'runtime! indent/' . name . '.lua'
    8              0.000004       endfor
    4              0.000001     endif

FUNCTION  <SNR>21_Start()
    Defined: ~/.local/share/nvim/lazy/copilot.vim/autoload/copilot.vim:54
Called 5 times
Total time:   0.000069
 Self time:   0.000039

count  total (s)   self (s)
    5   0.000062   0.000032   if s:Running()
    5              0.000004     return
                              endif
                              let s:agent = copilot#agent#New({'methods': { 'statusNotification': function('s:StatusNotification'), 'PanelSolution': function('copilot#panel#Solution'), 'PanelSolutionsDone': function('copilot#panel#SolutionsDone'), 'copilot/openURL': function('s:OpenURL'), }, 'editorConfiguration' : s:EditorConfiguration()})

FUNCTIONS SORTED ON TOTAL TIME
count  total (s)   self (s)  function
    3   0.446074   0.000107  copilot#Call()
    3   0.445905   0.000074  <SNR>62_AgentCall()
    3   0.444931   0.000091  <SNR>62_RequestAwait()
    3   0.444840   0.444511  <SNR>62_RequestWait()
    2   0.036906   0.000027  provider#clipboard#Call()
    2   0.036879   0.000047  13()
    2   0.036832   0.000176  <SNR>61_try_cmd()
    4   0.007704             <SNR>1_LoadFTPlugin()
   70   0.004170   0.001333  <SNR>20_Event()
   69   0.002835   0.000943  copilot#OnBufUnload()
    4   0.002359             <SNR>60_SynSet()
   69   0.001892             <SNR>21_Reject()
    4   0.001039             <SNR>2_LoadIndent()
    3   0.000900   0.000733  <SNR>62_LspRequest()
    1   0.000313             copilot#Browser()
    3   0.000180   0.000059  copilot#agent#LspResponse()
    3   0.000157             <SNR>62_SetUpRequest()
    2   0.000141   0.000127  <SNR>29_Highlight_Matching_Pair()
    3   0.000120             <SNR>62_OnResponse()
    5   0.000115   0.000046  copilot#Agent()

FUNCTIONS SORTED ON SELF TIME
count  total (s)   self (s)  function
    3   0.444840   0.444511  <SNR>62_RequestWait()
    4              0.007704  <SNR>1_LoadFTPlugin()
    4              0.002359  <SNR>60_SynSet()
   69              0.001892  <SNR>21_Reject()
   70   0.004170   0.001333  <SNR>20_Event()
    4              0.001039  <SNR>2_LoadIndent()
   69   0.002835   0.000943  copilot#OnBufUnload()
    3   0.000900   0.000733  <SNR>62_LspRequest()
    1              0.000313  copilot#Browser()
    2   0.036832   0.000176  <SNR>61_try_cmd()
    3              0.000157  <SNR>62_SetUpRequest()
    2   0.000141   0.000127  <SNR>29_Highlight_Matching_Pair()
    3              0.000120  <SNR>62_OnResponse()
    3   0.446074   0.000107  copilot#Call()
    3   0.444931   0.000091  <SNR>62_RequestAwait()
    2              0.000080  <SNR>21_Echo()
    3   0.445905   0.000074  <SNR>62_AgentCall()
    3   0.000180   0.000059  copilot#agent#LspResponse()
    2   0.036879   0.000047  13()
    5   0.000115   0.000046  copilot#Agent()

